# app.py
import streamlit as st
import pandas as pd
import geopandas as gpd
import plotly.express as px
import base64
# Configura√ß√£o inicial
st.set_page_config(
    page_title="Observat√≥rio Jundia√≠ - Programa Social para Fam√≠lias de Baixa Renda",
    page_icon="üìä",
    layout="wide"
)


df = pd.read_parquet('base_final.parquet')
df['count'] = 1
gdf = gpd.read_parquet('shp_bairros.parquet')
meses_referencia = sorted(df['mes_referencia_dados'].unique())


mapa_meses = {
    '01': 'Janeiro',
    '02': 'Fevereiro',
    '03': 'Mar√ßo',
    '04': 'Abril',
    '05': 'Maio',
    '06': 'Junho',
    '07': 'Julho',
    '08': 'Agosto',
    '09': 'Setembro',
    '10': 'Outubro',
    '11': 'Novembro',
    '12': 'Dezembro'
}

mapa_meses_inverted = {
    'Janeiro': '01',
    'Fevereiro': '02',
    'Mar√ßo': '03',
    'Abril': '04',
    'Maio': '05',
    'Junho': '06',
    'Julho': '07',
    'Agosto': '08',
    'Setembro': '09',
    'Outubro': '10',
    'Novembro': '11',
    'Dezembro': '12'
}


meses_opcoes = [mapa_meses[m] for m in meses_referencia]


@st.cache_data
def carregar_dados(meses_selecionados):

    meses = [mapa_meses_inverted[m] for m in meses_selecionados]

    df_filtrado = df[df['mes_referencia_dados'].isin(meses)]
    return df_filtrado



with st.sidebar:

    st.image('brasao.ico', width=40)
    st.title("Observat√≥rio de Jundia√≠")
    st.subheader("Programa Social para Fam√≠lias de Baixa Renda")
    st.markdown("""
        Esta ferramenta foi desenvolvida por Henrique Pougy.
    """)


with open("brasao.ico", "rb") as f:
    data = f.read()
logo_base64 = base64.b64encode(data).decode()

st.markdown(
    f"""
    <div style="display: flex; align-items: center;">
        <img src="data:image/png;base64,{logo_base64}" style="height:50px; margin-right:15px;">
        <h1 style="margin: 0;">Observat√≥rio de Jundia√≠ - Programa Social para Fam√≠lias de Baixa Renda</h1>
    </div>
    """,
    unsafe_allow_html=True
)
    
st.markdown("Observat√≥rio de Jundia√≠ - Programa Social para Fam√≠lias de Baixa Renda")
st.subheader("An√°lise de Dados do Programa Social para Fam√≠lias de Baixa Renda de Jundia√≠")
with st.expander("Sobre o Programa"):
    st.markdown("""
        O Programa Social para Fam√≠lias de Baixa Renda de Jundia√≠ √© uma iniciativa da Prefeitura Municipal que visa promover a inclus√£o social e a redu√ß√£o das desigualdades na cidade. Atrav√©s deste programa, s√£o oferecidos diversos servi√ßos e benef√≠cios √†s fam√≠lias em situa√ß√£o de vulnerabilidade, com o objetivo de melhorar a qualidade de vida e proporcionar oportunidades de desenvolvimento social e econ√¥mico.
    """)
with st.expander("Sobre a Ferramenta de An√°lise de Dados"):
    st.markdown("""
            Esta ferramenta de an√°lise de dados foi desenvolvida para apoiar a gest√£o e o monitoramento do Programa Social para Fam√≠lias de Baixa Renda de Jundia√≠, oferecendo aos gestores p√∫blicos e √† sociedade um meio √°gil e interativo de explorar informa√ß√µes atualizadas sobre o p√∫blico atendido. Com base em princ√≠pios de pol√≠tica p√∫blica orientada por evid√™ncias, a solu√ß√£o permite transformar dados gerenciais em conhecimento aplicado, fortalecendo a tomada de decis√£o, o acompanhamento de resultados e a transpar√™ncia na execu√ß√£o das a√ß√µes voltadas √† promo√ß√£o da inclus√£o social e √† redu√ß√£o das desigualdades.
        """)

df['elegivel_txt'] = df['eligivel'].apply(lambda x: 'Sim' if x else 'N√£o')

with st.container():
    st.subheader("S√©rie Hist√≥rica")
    st.markdown("""
        Esta se√ß√£o apresenta a evolu√ß√£o das pessoas e fam√≠lias eleg√≠veis ao programa ao longo do tempo.
    """)
    columns = st.columns(2)

    with columns[0]:

        st.markdown("##### Evolu√ß√£o das Quantidade de Pessoas Eleg√≠veis ao Programa ao longo dos meses")

        df_grouped_eligivel_time_series = (
        df.groupby(['mes_referencia_dados', 'elegivel_txt'])['count']
        .sum()
        .reset_index()
        )

        fig = px.line(
        df_grouped_eligivel_time_series,
        x="mes_referencia_dados",
        y="count",
        color="elegivel_txt",  
        markers=True,
        title="Total de pessoas eleg√≠veis por m√™s",
        labels={
            "mes_referencia_dados": "M√™s de Refer√™ncia",
            "count": "Total de Pessoas",
            "elegivel_txt": "Elegibilidade"  
        }
        )
        st.plotly_chart(fig, use_container_width=True)

    with columns[1]:

        st.markdown("##### Evolu√ß√£o da quantidade de Fam√≠lias Eleg√≠veis ao Programa ao longo dos meses")


        df_grouped_eligivel_time_series_family = (
        df[['mes_referencia_dados', 'cod_familiar', 'elegivel_txt', 'count']].drop_duplicates()\
            .groupby(['mes_referencia_dados', 'elegivel_txt'])['count']
        .sum()
        .reset_index()
        )

        fig = px.line(
        df_grouped_eligivel_time_series_family,
        x="mes_referencia_dados",
        y="count",
        color="elegivel_txt",  
        markers=True,
        title="Total de fam√≠lias eleg√≠veis por m√™s",
        labels={
            "mes_referencia_dados": "M√™s de Refer√™ncia",
            "count": "Total de fam√≠lias",
            "elegivel_txt": "Elegibilidade"  
        }
        )
        st.plotly_chart(fig, use_container_width=True)
    


# Seletor m√∫ltiplo
meses_selecionados = st.multiselect(
    "Selecione um ou mais meses",
    options=meses_opcoes,
    default='Janeiro'  # seleciona janeiro por padrao
)
df_filtrado = carregar_dados(meses_selecionados)


with st.container(border=True):

    st.subheader("Dados Gerais do Programa para os meses selecionados")

    columns = st.columns(2)
    with columns[0]:
        st.metric(
            label="Total de pessoas eleg√≠veis",
            value=df_filtrado['eligivel'].sum(),
        )

    with columns[1]:
        st.metric(
            label="Total de fam√≠lias eleg√≠veis",
            value=df_filtrado[df_filtrado['eligivel']]['cod_familiar'].nunique(),
        )

with st.container(border=True):

    st.subheader("Distribui√ß√£o Geogr√°fica das Pessoas Eleg√≠veis")
    st.markdown("""
        O mapa abaixo mostra a distribui√ß√£o geogr√°fica das pessoas eleg√≠veis ao programa, permitindo identificar as √°reas com maior concentra√ß√£o de benefici√°rios.
    """)

    df_elegiveis = df_filtrado[df_filtrado['eligivel']]
    df_elegiveis = df_elegiveis.groupby('cdbairro')['count'].sum().reset_index()
    df_elegiveis = df_elegiveis[df_elegiveis['cdbairro'].notnull()]
    df_elegiveis['cdbairro'] = df_elegiveis['cdbairro'].astype(int)

    mapper_bairros = df_filtrado[['cdbairro', 'bairro_oficial']].drop_duplicates()
    df_elegiveis = df_elegiveis.merge(mapper_bairros, on='cdbairro', how='left')

    gdf.to_crs(epsg=4326, inplace=True)  # Certifique-se de que o GeoDataFrame est√° no CRS correto
    geojson = gdf.to_geo_dict()



    fig = px.choropleth_map(
        df_elegiveis,
        geojson=geojson,
        locations='cdbairro',                 # chave no seu DF
        featureidkey='properties.cdbairro',             # chave correspondente no GeoJSON
        color='count',
        color_continuous_scale="OrRd",
        zoom=11,
        center={"lat": -23.185, "lon": -46.897},  # centro aproximado de Jundia√≠; ajuste se necess√°rio
        opacity=0.8,
        labels={'count': 'N√∫mero de Pessoas'},
        hover_data={  # colunas extras no tooltip
        'bairro_oficial': True,
        'count': True,
        'cdbairro': False    # oculta o c√≥digo se n√£o quiser exibir
        }
    )
    st.plotly_chart(fig, use_container_width=True)

with st.container(border=True):
    columns = st.columns(3)
    with columns[0]:
        st.subheader("Percentual de pessoas eleg√≠veis")
        df_grouped_eligivel = (
            df_filtrado.groupby('elegivel_txt')['count']
            .sum()
            .reset_index()
        )
        fig = px.pie(
        df_grouped_eligivel,
        names="elegivel_txt",   # coluna de categorias
        values="count",         # valores
        hole=0.4,               # cria a "rosca" (0.4 √© um bom tamanho)
        title="Distribui√ß√£o por Elegibilidade"
        )
        st.plotly_chart(fig, use_container_width=True)

        columns_inside = st.columns(2)
        with columns_inside[0]:
            st.metric(
                label="Total de pessoas eleg√≠veis",
                value=df_grouped_eligivel[df_grouped_eligivel['elegivel_txt'] == 'Sim']['count'].values[0],
            )
        with columns_inside[1]:
            st.metric(
                label="Total de pessoas n√£o eleg√≠veis",
                value=df_grouped_eligivel[df_grouped_eligivel['elegivel_txt'] == 'N√£o']['count'].values[0],
            )

    with columns[1]:
        st.subheader("Distribui√ß√£o das pessoas por faixa de renda")
        df_grouped_renda = (
            df_filtrado.groupby('faixa_renda')['count']
            .sum()
            .reset_index()
        )
        fig = px.pie(
            df_grouped_renda,
            names="faixa_renda",   # coluna de categorias
            values="count",         # valores
            hole=0.4,               # cria a "rosca" (0.4 √© um bom tamanho)
            title="Distribui√ß√£o por Faixa de Renda"
        )
        fig.update_layout(
            legend_title_text='Faixa de Renda',
        )
        fig.update_traces(textposition='inside')  # coloca os r√≥tulos dentro do gr√°fico
        fig.update_traces(textfont_size=12)  # tamanho da fonte dos r√≥tulos
        fig.update_traces(hoverinfo="label+percent")  # mostra r√≥tulo e porcentagem ao passar o mouse
        fig.update_layout(legend=dict(title="Faixa de Renda"))  # t√≠tulo da legenda


        fig.update_traces(textinfo="percent")  # mostra porcentagem e nome
        st.plotly_chart(fig, use_container_width=True)

    with columns[2]:
        st.subheader("Distribui√ß√£o das pessoas por sexo")
        df_grouped_sexo = (
            df_filtrado.groupby('sexo')['count']
            .sum()
            .reset_index()
        )
        fig = px.pie(
            df_grouped_sexo,
            names="sexo",   # coluna de categorias
            values="count",         # valores
            hole=0.4,               # cria a "rosca" (0.4 √© um bom tamanho)
            title="Distribui√ß√£o por Sexo"
        )

        fig.update_traces(textinfo="percent+label")  # mostra porcentagem e nome
        st.plotly_chart(fig, use_container_width=True)


with st.container(border=True):
    columns = st.columns(2)

    with columns[0]:
        st.subheader("Distribui√ß√£o da idade das pessoas")
        fig = px.histogram(
            df_filtrado,
            x='idade',
            nbins=50,
            title="Distribui√ß√£o da Idade das Pessoas",
            labels={'idade': 'Idade', 'count' : 'N√∫mero de Pessoas'},
            color_discrete_sequence=["#656EEC"]
        )

        st.plotly_chart(fig, use_container_width=True)
    
    with columns[1]:
        st.subheader("Distribui√ß√£o da idade das pessoas por elegibilidade")

        fig = px.violin(
            df_filtrado,
            x="elegivel_txt",       
            y="idade",              
            box=True,               
            points="all",           
            color="elegivel_txt",   
            color_discrete_sequence=["#656EEC", "#F08A24"],  
            labels={
                "idade": "Idade",
                "elegivel_txt": "Elegibilidade"
            },
            title="Distribui√ß√£o da Idade por Status de Elegibilidade"
        )

        st.plotly_chart(fig, use_container_width=True)

with st.container(border=True):

    columns = st.columns(2)
    with columns[0]:
        st.subheader("Escolaridade do chefe da fam√≠lia - valores absolutos")

        chefes = df_filtrado[df_filtrado['parentesco'] == 'Pessoa Respons√°vel Familiar']
        chefes= chefes[['escolaridade', 'elegivel_txt', 'count']]
        fig = px.bar(
            chefes.groupby(['escolaridade', 'elegivel_txt'])['count'].sum().reset_index(),
            x='escolaridade',
            y='count',
            color='elegivel_txt',
            title="Escolaridade do Chefe da Fam√≠lia",
            labels={'escolaridade': 'Escolaridade', 'count': 'N√∫mero de Pessoas'},
            color_discrete_sequence=["#656EEC", "#F08A24"],
            barmode='group'
        )
        st.plotly_chart(fig, use_container_width=True)

    with columns[1]:
        st.subheader("Escolaridade do chefe da fam√≠lia - valores percentuais")

        escolaridade_selecionada = st.multiselect(
            "Selecione a escolaridade para compara√ß√£o",
            options=chefes['escolaridade'].unique(),
            default=chefes['escolaridade'].unique()[0]
        )

        chefes = df_filtrado[df_filtrado['parentesco'] == 'Pessoa Respons√°vel Familiar']
        chefes= chefes[['escolaridade', 'elegivel_txt', 'count']]
        chefes_escolaridade = chefes[chefes['escolaridade'].isin(escolaridade_selecionada)]
        total_elegivel = chefes[chefes['elegivel_txt'] == 'Sim']['count'].sum()
        total_nao_elegivel = chefes[chefes['elegivel_txt'] == 'N√£o']['count'].sum()
        percent_elegivel = (chefes_escolaridade[chefes_escolaridade['elegivel_txt'] == 'Sim']['count'].sum() / (total_elegivel)) * 100 
        percent_n_elegivel = (chefes_escolaridade[chefes_escolaridade['elegivel_txt'] == 'N√£o']['count'].sum() / (total_nao_elegivel)) * 100 

        dados = {
            'elegivel_txt': ['Sim', 'N√£o'],
            'percent': [percent_elegivel, percent_n_elegivel]
        }

        df_grafico = pd.DataFrame(dados)

        fig = px.pie(
            df_grafico,
            names="elegivel_txt",
            values="percent",
            hole=0.4,
            title="Distribui√ß√£o por Elegibilidade (Chefes de Fam√≠lia)"
        )
        fig.update_traces(textinfo="percent+label")
        st.plotly_chart(fig, use_container_width=True)





st.subheader("üìä Detalhes dos dados para o m√™s selecionado")
st.write('### Total de pessoas selecionadas:', df_filtrado.shape[0],
         ' | Total de fam√≠lias:', df_filtrado['cod_familiar'].nunique())
with st.expander("Ver tabela completa"):
    st.dataframe(df_filtrado)




columns = st.columns(8)
with columns[7]:
    st.image('logo_cidade.jpg', width=100)